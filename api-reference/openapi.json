{
  "openapi": "3.0.1",
  "info": {
    "title": "Car Rental API",
    "description": "API specification for a car rental service system",
    "license": {
      "name": "MIT"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://carrenta-bcbba8394638.herokuapp.com/api/staff"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
      "/cars": {
      "post": {
        "summary": "Create a new car",
        "description": "Creates a new car in the system",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "model",
                  "color",
                  "maker",
                  "trim",
                  "lastMaintenanceDate",
                  "available",
                  "year",
                  "registrationNumber",
                  "pictures",
                  "pricePerDay",
                  "disabled",
                  "golden"
                ],
                "properties": {
                  "model": {
                    "type": "string",
                    "description": "Car model"
                  },
                  "color": {
                    "type": "string",
                    "description": "Car color"
                  },
                  "maker": {
                    "type": "string",
                    "description": "Car manufacturer"
                  },
                  "trim": {
                    "type": "string",
                    "description": "Car trim level"
                  },
                  "lastMaintenanceDate": {
                    "type": "string",
                    "description": "Date of last maintenance"
                  },
                  "available": {
                    "type": "boolean",
                    "description": "Whether the car is available for rent"
                  },
                  "year": {
                    "type": "integer",
                    "description": "Car manufacturing year"
                  },
                  "registrationNumber": {
                    "type": "string",
                    "description": "Car registration number"
                  },
                  "pictures": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Array of picture URLs"
                  },
                  "pricePerDay": {
                    "type": "number",
                    "description": "Rental price per day"
                  },
                  "averageRating": {
                    "type": "number",
                    "description": "Average rating of the car"
                  },
                  "categories": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Categories the car belongs to"
                  },
                  "disabled": {
                    "type": "boolean",
                    "description": "Whether the car is disabled in the system"
                  },
                  "golden": {
                    "type": "boolean",
                    "description": "Whether the car has golden status"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Car created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Car"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters"
          }
        }
      },
      "get": {
        "summary": "Get all cars",
        "description": "Retrieves a list of all non-disabled cars in the system",
        "responses": {
          "200": {
            "description": "List of cars retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Car"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cars/{registrationNumber}": {
      "get": {
        "summary": "Get car by registration number",
        "description": "Retrieves detailed information about a specific car",
        "parameters": [
          {
            "name": "registrationNumber",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The registration number of the car to retrieve"
          }
        ],
        "responses": {
          "200": {
            "description": "Car details retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Car"
                }
              }
            }
          },
          "404": {
            "description": "Car not found"
          }
        }
      },
      "patch": {
        "summary": "Update car",
        "description": "Updates an existing car",
        "parameters": [
          {
            "name": "registrationNumber",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The registration number of the car to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "model": {
                    "type": "string"
                  },
                  "color": {
                    "type": "string"
                  },
                  "maker": {
                    "type": "string"
                  },
                  "trim": {
                    "type": "string"
                  },
                  "lastMaintenanceDate": {
                    "type": "string"
                  },
                  "available": {
                    "type": "boolean"
                  },
                  "year": {
                    "type": "integer"
                  },
                  "pictures": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "disabled": {
                    "type": "boolean"
                  },
                  "pricePerDay": {
                    "type": "number"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Car updated successfully"
          },
          "404": {
            "description": "Car not found"
          }
        }
      },
      "delete": {
        "summary": "Delete car",
        "description": "Deletes an existing car",
        "parameters": [
          {
            "name": "registrationNumber",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The registration number of the car to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Car deleted successfully"
          },
          "404": {
            "description": "Car not found"
          }
        }
      }
    },
    "/cars/specifications/{registrationNumber}": {
      "get": {
        "summary": "Get car specifications",
        "description": "Retrieves detailed specifications for a specific car",
        "parameters": [
          {
            "name": "registrationNumber",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The registration number of the car"
          }
        ],
        "responses": {
          "200": {
            "description": "Car specifications retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CarSpecifications"
                }
              }
            }
          },
          "404": {
            "description": "Specifications not found"
          }
        }
      }
    },
    "/cars/filtered": {
      "get": {
        "summary": "Get filtered cars",
        "description": "Retrieves cars based on specified filters",
        "parameters": [
          {
            "name": "maker",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Filter by car maker"
          },
          {
            "name": "model",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Filter by car model"
          },
          {
            "name": "year",
            "in": "query",
            "schema": {
              "type": "integer"
            },
            "description": "Filter by manufacturing year"
          },
          {
            "name": "engineType",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Filter by engine type"
          },
          {
            "name": "engineCylinders",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Filter by number of cylinders"
          },
          {
            "name": "fuelType",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Filter by fuel type"
          },
          {
            "name": "transmission",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Filter by transmission type"
          },
          {
            "name": "drive",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Filter by drive type"
          },
          {
            "name": "doors",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Filter by number of doors"
          },
          {
            "name": "engineHorsepower",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Filter by engine horsepower"
          }
        ],
        "responses": {
          "200": {
            "description": "Filtered cars retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Car"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cars/category/{category}": {
      "get": {
        "summary": "Get cars by category",
        "description": "Retrieves cars belonging to a specific category",
        "parameters": [
          {
            "name": "category",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Category to filter cars by"
          }
        ],
        "responses": {
          "200": {
            "description": "Cars retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Car"
                  }
                }
              }
            }
          }
        }
      }
    },

    "/bookings": {
      "post": {
        "summary": "Create a new booking",
        "description": "Creates a new booking in the system",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "customerId",
                  "carId",
                  "startDate",
                  "endDate",
                  "totalCost",
                  "paidAmount",
                  "status",
                  "pickupLocation",
                  "dropoffLocation",
                  "customerInsurancetype",
                  "customerInsuranceNumber"
                ],
                "properties": {
                  "customerId": {
                    "type": "string",
                    "description": "ID of the customer making the booking"
                  },
                  "carId": {
                    "type": "string",
                    "description": "Registration number of the car being booked"
                  },
                  "startDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Start date and time of the booking"
                  },
                  "endDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "End date and time of the booking"
                  },
                  "totalCost": {
                    "type": "number",
                    "description": "Total cost of the booking"
                  },
                  "paidAmount": {
                    "type": "number",
                    "description": "Amount already paid for the booking"
                  },
                  "status": {
                    "type": "string",
                    "enum": ["pending", "confirmed", "completed", "cancelled"],
                    "description": "Current status of the booking"
                  },
                  "pickupLocation": {
                    "type": "string",
                    "description": "Location where the car will be picked up"
                  },
                  "dropoffLocation": {
                    "type": "string",
                    "description": "Location where the car will be dropped off"
                  },
                  "customerInsurancetype": {
                    "type": "string",
                    "description": "Type of insurance coverage"
                  },
                  "customerInsuranceNumber": {
                    "type": "string",
                    "description": "Customer's insurance policy number"
                  }
                }
              },
              "example": {
                "customerId": "user_123",
                "carId": "ABC123",
                "startDate": "2024-12-01T10:00:00Z",
                "endDate": "2024-12-05T10:00:00Z",
                "totalCost": 500.00,
                "paidAmount": 0,
                "status": "pending",
                "pickupLocation": "Airport Terminal 1",
                "dropoffLocation": "Downtown Branch",
                "customerInsurancetype": "comprehensive",
                "customerInsuranceNumber": "INS123456"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Booking created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "description": "The ID of the created booking"
                },
                "example": "booking_abc123"
              }
            }
          },
          "400": {
            "description": "Invalid request parameters"
          }
        }
      },
      "get": {
        "summary": "Get all bookings",
        "description": "Retrieves a list of all bookings in the system",
        "responses": {
          "200": {
            "description": "List of bookings retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BookingDetail"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/bookings/{id}": {
      "get": {
        "summary": "Get booking by ID",
        "description": "Retrieves detailed information about a specific booking",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the booking to retrieve"
          }
        ],
        "responses": {
          "200": {
            "description": "Booking details retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookingDetail"
                }
              }
            }
          },
          "404": {
            "description": "Booking not found"
          }
        }
      },
      "put": {
        "summary": "Update booking",
        "description": "Updates an existing booking",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the booking to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "startDate": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "endDate": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "status": {
                    "type": "string",
                    "enum": ["pending", "confirmed", "completed", "cancelled"]
                  },
                  "pickupLocation": {
                    "type": "string"
                  },
                  "dropoffLocation": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Booking updated successfully"
          },
          "404": {
            "description": "Booking not found"
          }
        }
      },
      "delete": {
        "summary": "Delete booking",
        "description": "Deletes an existing booking",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the booking to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Booking deleted successfully"
          },
          "404": {
            "description": "Booking not found"
          }
        }
      }
    },
    "/staff": {
      "get": {
        "summary": "Get all staff members",
        "description": "Retrieves a list of all staff members in the system",
        "responses": {
          "200": {
            "description": "List of staff members retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StaffMember"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Add new staff member",
        "description": "Creates a new staff member in the system",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["role", "email"],
                "properties": {
                  "role": {
                    "type": "string",
                    "description": "Role of the staff member"
                  },
                  "email": {
                    "type": "string",
                    "description": "Email address of the staff member"
                  }
                }
              },
              "example": {
                "role": "manager",
                "email": "manager@example.com"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Staff member created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "description": "The ID of the created staff member"
                },
                "example": "staff_123"
              }
            }
          },
          "400": {
            "description": "Invalid request parameters"
          }
        }
      }
    },
    "/staff/{id}": {
      "get": {
        "summary": "Get staff member by ID",
        "description": "Retrieves detailed information about a specific staff member",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the staff member to retrieve"
          }
        ],
        "responses": {
          "200": {
            "description": "Staff member details retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StaffMember"
                }
              }
            }
          },
          "404": {
            "description": "Staff member not found"
          }
        }
      },
      "patch": {
        "summary": "Update staff member",
        "description": "Updates an existing staff member",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the staff member to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "role": {
                    "type": "string",
                    "description": "Updated role of the staff member"
                  },
                  "email": {
                    "type": "string",
                    "description": "Updated email address of the staff member"
                  }
                }
              },
              "example": {
                "role": "senior_manager",
                "email": "senior.manager@example.com"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Staff member updated successfully"
          },
          "404": {
            "description": "Staff member not found"
          }
        }
      },
      "delete": {
        "summary": "Delete staff member",
        "description": "Deletes an existing staff member",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the staff member to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Staff member deleted successfully"
          },
          "404": {
            "description": "Staff member not found"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "BookingDetail": {
        "type": "object",
        "required": [
          "id",
          "customerId",
          "carId",
          "startDate",
          "endDate",
          "totalCost",
          "paidAmount",
          "status"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "customerId": {
            "type": "string"
          },
          "carId": {
            "type": "string"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "totalCost": {
            "type": "number"
          },
          "paidAmount": {
            "type": "number"
          },
          "status": {
            "type": "string",
            "enum": ["pending", "confirmed", "completed", "cancelled"]
          },
          "pickupLocation": {
            "type": "string"
          },
          "dropoffLocation": {
            "type": "string"
          },
          "customerInsurancetype": {
            "type": "string"
          },
          "customerInsuranceNumber": {
            "type": "string"
          },
          "carDetails": {
            "type": "object",
            "properties": {
              "make": {
                "type": "string"
              },
              "model": {
                "type": "string"
              },
              "year": {
                "type": "integer"
              },
              "color": {
                "type": "string"
              },
              "trim": {
                "type": "string"
              }
            }
          },
          "reviewId": {
            "type": "string"
          },
          "rewardsPointsEarned": {
            "type": "integer"
          },
          "rewardsPointsUsed": {
            "type": "integer"
          },
          "cancellationPolicy": {
            "type": "string"
          }
        }
      },
      "StaffMember": {
        "type": "object",
        "required": ["id", "role", "email"],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the staff member"
          },
          "role": {
            "type": "string",
            "description": "Role of the staff member"
          },
          "email": {
            "type": "string",
            "description": "Email address of the staff member"
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  }
}